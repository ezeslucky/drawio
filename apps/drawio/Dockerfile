FROM node:20-alpine AS base

# Install pnpm
RUN npm install -g pnpm

WORKDIR /usr/src/app

# Add ARG for DATABASE_URL
ARG DATABASE_URL
ARG JWT_SECRET

# Copy necessary files for dependency installation
COPY ./packages ./packages
COPY ./package.json ./package.json
COPY ./pnpm-lock.yaml ./pnpm-lock.yaml
COPY ./pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY ./turbo.json ./turbo.json
COPY ./apps/drawio ./apps/drawio

# Install global Prisma CLI
RUN npm install -g prisma@6.5.0

# Install dependencies
RUN pnpm install --frozen-lockfile

# Generate database
# RUN pnpm run db:generate

# Change to the packages/db directory and generate Prisma client
WORKDIR /usr/src/app/packages/db
RUN prisma generate

# Change back to the root directory
WORKDIR /usr/src/app

# Set environment variables
ENV DATABASE_URL=${DATABASE_URL}
ENV JWT_SECRET=${JWT_SECRET}

# Create .env.local for Next.js
WORKDIR /usr/src/app/apps/drawio
RUN echo "JWT_SECRET=$JWT_SECRET" > .env.local
RUN echo "DATABASE_URL=$DATABASE_URL" >> .env.local

# Change back to the root directory
WORKDIR /usr/src/app

# Debugging step
# RUN echo "DATABASE_URL length: ${#DATABASE_URL}"
# RUN echo "JWT_SECRET length: ${#JWT_SECRET}"

# Fail if secrets are not set
# RUN test -n "$DATABASE_URL" && test -n "$JWT_SECRET"

# Debug step: print environment variables
# RUN echo "DATABASE_URL: ${DATABASE_URL}" && echo "JWT_SECRET set: ${JWT_SECRET:+yes}"

# Build the application with database URL
RUN DATABASE_URL=${DATABASE_URL} JWT_SECRET=${JWT_SECRET} pnpm run build

# Expose the port
EXPOSE 3000

# Start the drawio application
CMD ["pnpm", "run", "start:drawio"]